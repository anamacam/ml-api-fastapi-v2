# -*- coding: utf-8 -*-
"""
üõ°Ô∏è Manejadores de errores centralizados

Utilidades para manejo consistente de errores en toda la aplicaci√≥n,
proporcionando respuestas estructuradas y logging apropiado.
"""

# üö® ====== COPILOTO/CURSOR: MANEJO SEGURO DE ERRORES ====== üö®
#
# üîê SEGURIDAD CR√çTICA - NO exponer informaci√≥n sensible:
#    ‚ùå PROHIBIDO: Stack traces completos al cliente
#    ‚ùå PROHIBIDO: Rutas de archivos del servidor
#    ‚ùå PROHIBIDO: Detalles de base de datos (esquemas, tablas)
#    ‚ùå PROHIBIDO: Configuraci√≥n interna del sistema
#    ‚ùå PROHIBIDO: Credenciales en logs de error
#
# ‚úÖ MANEJO SEGURO OBLIGATORIO:
#    ‚úÖ Logs detallados SOLO en servidor (no al cliente)
#    ‚úÖ Mensajes gen√©ricos al cliente ("Error interno del servidor")
#    ‚úÖ Error IDs √∫nicos para correlacionar logs con requests
#    ‚úÖ Sanitizar inputs antes de logging
#    ‚úÖ Diferentes niveles de detalle por entorno (dev vs prod)
#
# üèóÔ∏è PRINCIPIOS DE ERROR HANDLING:
#    ‚úÖ DRY: Handlers centralizados, no duplicar l√≥gica
#    ‚úÖ KISS: Respuestas simples y consistentes
#    ‚úÖ Single Responsibility: Un handler por tipo de error
#
# üß™ TDD PARA ERROR HANDLERS:
#    üî¥ RED: Tests que verifiquen que NO se expone info sensible
#    üü¢ GREEN: Implementaci√≥n que pase tests de seguridad
#    üîµ REFACTOR: Mejorar estructura sin exponer datos
#
# üìä LOGGING LEVELS CORRECTOS:
#    üî¥ ERROR: Errores cr√≠ticos del sistema
#    üü° WARNING: Problemas recuperables
#    üîµ INFO: Flujo normal de la aplicaci√≥n
#    ‚ö™ DEBUG: Detalles t√©cnicos (SOLO en development)
#
# ‚ö†Ô∏è EJEMPLOS INCORRECTOS:
#    ‚ùå return {"error": f"Database error: {str(db_exception)}"}
#    ‚ùå logging.error(f"User password: {password}")
#    ‚ùå {"detail": f"File not found: /etc/secrets/api_keys.txt"}
#
# ‚úÖ EJEMPLOS CORRECTOS:
#    ‚úÖ return {"error": "Error interno del servidor", "error_id": "ERR-123"}
#    ‚úÖ logging.error(f"Database connection failed", extra={"error_id": error_id})
#    ‚úÖ {"detail": "Recurso no encontrado", "error_code": "RESOURCE_NOT_FOUND"}
#
# üìö REFERENCIA: /RULES.md secci√≥n "üîê REGLAS DE SEGURIDAD"
# 
# =============================================================

from typing import Any, Dict, List, Optional, Union
import logging
import uuid

from fastapi import HTTPException

from app.models.api_models import ValidationDetails


def handle_prediction_error(error: Dict[str, Any]) -> HTTPException:
    """
    Traduce un error clasificado por el servicio a una HTTPException de FastAPI.
    
    Args:
        error: Diccionario con informaci√≥n del error
        
    Returns:
        HTTPException apropiada seg√∫n el tipo de error
    """
    error_type = error.get("error_type", "")
    
    error_mapping = {
        "input_validation": (422, error),
        "model_not_found": (404, error),
        "prediction_failed": (500, error),
    }
    
    status_code, detail = error_mapping.get(error_type, (500, "Error interno de predicci√≥n."))
    return HTTPException(status_code=status_code, detail=detail)


def build_validation_details(
    request_include_details: bool, 
    result: Dict[str, Any]
) -> Optional[ValidationDetails]:
    """
    Construye el objeto de detalles de validaci√≥n si fue solicitado.
    
    Args:
        request_include_details: Si el cliente solicit√≥ detalles de validaci√≥n
        result: Resultado de la predicci√≥n con detalles
        
    Returns:
        ValidationDetails si fue solicitado, None en caso contrario
    """
    if not request_include_details:
        return None

    details = result.get("validation_details", {})
    return ValidationDetails(
        input_valid=details.get("input_valid", False),
        model_valid=details.get("model_valid", False),
    )


def handle_service_error(service_name: str, error: Exception) -> HTTPException:
    """
    Maneja errores gen√©ricos de servicios y los convierte en HTTPExceptions.
    
    Args:
        service_name: Nombre del servicio que fall√≥
        error: Excepci√≥n original
        
    Returns:
        HTTPException con mensaje apropiado
    """
    error_message = f"Error interno en {service_name}: {str(error)}"
    return HTTPException(status_code=500, detail=error_message) 