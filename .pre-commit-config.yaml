# 🔧 Pre-commit Configuration - ML API FastAPI v2
# Este archivo configura hooks que se ejecutan antes de cada commit
# Para instalar: pip install pre-commit && pre-commit install

repos:
  # ==========================================
  # 🔍 HOOKS GENERALES
  # ==========================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.6.0
    hooks:
      # Archivos
      - id: trailing-whitespace
        name: "🧹 Eliminar espacios al final"
      - id: end-of-file-fixer
        name: "📝 Arreglar final de archivo"
      - id: check-added-large-files
        name: "📦 Verificar archivos grandes"
        args: ["--maxkb=10000"] # 10MB máximo

      # Formato
      - id: check-yaml
        name: "📋 Verificar YAML"
        exclude: ^docs/
      - id: check-json
        name: "🔍 Verificar JSON"
      - id: check-toml
        name: "⚙️ Verificar TOML"
      - id: check-xml
        name: "📄 Verificar XML"

      # Git
      - id: check-merge-conflict
        name: "🔀 Verificar conflictos merge"
      - id: check-case-conflict
        name: "📁 Verificar conflictos case"

      # Seguridad básica
      - id: detect-private-key
        name: "🔐 Detectar claves privadas"
      - id: check-executables-have-shebangs
        name: "📜 Verificar shebangs"

  # ==========================================
  # 🐍 PYTHON / BACKEND
  # ==========================================

  # Black - Formateo de código
  - repo: https://github.com/psf/black
    rev: 24.10.0
    hooks:
      - id: black
        name: "🖤 Black - Formateo Python"
        files: ^backend/.*\.py$
        args: [--line-length=88, --target-version=py311]

  # isort - Ordenar imports
  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        name: "📚 isort - Ordenar imports"
        files: ^backend/.*\.py$
        args: [--profile=black, --line-length=88]

  # Flake8 - Linting
  - repo: https://github.com/pycqa/flake8
    rev: 7.1.1
    hooks:
      - id: flake8
        name: "🔍 Flake8 - Linting Python"
        files: ^backend/.*\.py$
        args:
          [
            --max-line-length=88,
            --extend-ignore=E203,
            W503,
            E501,
            --max-complexity=10,
          ]
        additional_dependencies:
          - flake8-docstrings
          - flake8-import-order
          - flake8-bugbear

  # MyPy - Type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.13.0
    hooks:
      - id: mypy
        name: "🎯 MyPy - Type checking"
        files: ^backend/app/.*\.py$
        args: [--ignore-missing-imports, --follow-imports=skip]
        additional_dependencies:
          - types-requests
          - types-redis

  # Bandit - Seguridad Python
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.10
    hooks:
      - id: bandit
        name: "🛡️ Bandit - Seguridad Python"
        files: ^backend/.*\.py$
        args: [-r, -f, json, -o, bandit-report.json]
        exclude: ^backend/tests/.*

  # ==========================================
  # 🌐 JAVASCRIPT / TYPESCRIPT / FRONTEND
  # ==========================================

  # ESLint - Linting JS/TS
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v9.18.0
    hooks:
      - id: eslint
        name: "🔍 ESLint - Linting JS/TS"
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        types: [file]
        args: [--fix, --max-warnings=0]
        additional_dependencies:
          - eslint@^9.18.0
          - "@typescript-eslint/eslint-plugin@^8.20.0"
          - "@typescript-eslint/parser@^8.20.0"
          - "eslint-plugin-react@^7.37.2"
          - "eslint-plugin-react-hooks@^5.1.0"

  # Prettier - Formateo JS/TS
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v4.0.0-alpha.8
    hooks:
      - id: prettier
        name: "💅 Prettier - Formateo JS/TS/CSS"
        files: ^frontend/.*\.(js|jsx|ts|tsx|css|scss|json|md)$
        args: [--write, --config, frontend/web-app/.prettierrc]

  # ==========================================
  # 🐳 DOCKER
  # ==========================================

  # Hadolint - Linting Dockerfiles
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        name: "🐳 Hadolint - Linting Dockerfiles"
        files: Dockerfile.*
        args: [--ignore, DL3008, --ignore, DL3009]

  # ==========================================
  # 📝 DOCUMENTACIÓN
  # ==========================================

  # Markdownlint - Linting Markdown
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.42.0
    hooks:
      - id: markdownlint
        name: "📝 Markdownlint - Linting Markdown"
        files: \.md$
        args: [--fix, --config, .markdownlint.json]

  # ==========================================
  # 🔧 CONFIGURACIÓN ESPECÍFICA
  # ==========================================

  # Yamllint - Linting YAML avanzado
  - repo: https://github.com/adrienverge/yamllint
    rev: v1.35.1
    hooks:
      - id: yamllint
        name: "📋 Yamllint - Linting YAML avanzado"
        args: [-c, .yamllint.yaml]

  # Check requirements.txt
  - repo: https://github.com/Lucas-C/pre-commit-hooks
    rev: v1.5.5
    hooks:
      - id: remove-tabs
        name: "🚫 Eliminar tabs"
        files: ^backend/requirements/.*\.txt$

  # Security check for requirements
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        name: "🛡️ Safety - Verificar dependencias vulnerables"
        files: ^backend/requirements/.*\.txt$

  # ==========================================
  # 🔬 TESTS
  # ==========================================

  # Pytest - Ejecutar tests críticos
  - repo: local
    hooks:
      - id: pytest-fast
        name: "🧪 Pytest - Tests rápidos"
        entry: bash -c 'cd backend && python -m pytest tests/unit/ -x --tb=short'
        language: system
        files: ^backend/.*\.py$
        pass_filenames: false

  # ==========================================
  # 🔍 HOOKS LOCALES PERSONALIZADOS
  # ==========================================

  - repo: local
    hooks:
      # Verificar que no hay print() en producción
      - id: no-print-statements
        name: "🚫 No print() en código"
        entry: bash -c 'if grep -r "print(" backend/app/ --include="*.py"; then echo "❌ Encontrados print() statements en código de producción"; exit 1; fi'
        language: system
        files: ^backend/app/.*\.py$
        pass_filenames: false

      # Verificar que hay docstrings en funciones públicas
      - id: check-docstrings
        name: "📖 Verificar docstrings"
        entry: bash -c 'python infrastructure/scripts/check_docstrings.py'
        language: system
        files: ^backend/app/.*\.py$
        pass_filenames: false

      # Verificar variables de entorno requeridas
      - id: check-env-vars
        name: "🔧 Verificar variables de entorno"
        entry: bash -c 'python infrastructure/scripts/check_env_vars.py'
        language: system
        files: ^(backend/app/core/config\.py|config/.*\.env)$
        pass_filenames: false

      # Verificar que package.json tiene las versiones correctas
      - id: check-package-versions
        name: "📦 Verificar versiones package.json"
        entry: bash -c 'python infrastructure/scripts/check_package_versions.py'
        language: system
        files: ^frontend/.*/package\.json$
        pass_filenames: false

# ==========================================
# ⚙️ CONFIGURACIÓN GLOBAL
# ==========================================
default_language_version:
  python: python3.11
  node: "18.19.0"

# Configuración de staging
default_stages: [commit, push]

# Excluir archivos
exclude: |
  (?x)^(
    backend/venv/.*|
    backend/\.venv/.*|
    frontend/.*/node_modules/.*|
    frontend/.*/dist/.*|
    frontend/.*/build/.*|
    data/.*|
    \.git/.*|
    .*\.min\.(js|css)$|
    .*\.bundle\.(js|css)$
  )$

# Configuración de CI
ci:
  autofix_commit_msg: |
    🤖 [pre-commit.ci] auto fixes from pre-commit hooks

    Para más información, ver https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ""
  autoupdate_commit_msg: "🤖 [pre-commit.ci] pre-commit autoupdate"
  autoupdate_schedule: weekly
  skip: [pytest-fast, check-docstrings, check-env-vars, check-package-versions]
  submodules: false
