version: "3.8"

services:
  # üóÑÔ∏è PostgreSQL - Base de datos principal
  postgres:
    image: postgres:16-alpine
    container_name: ml-api-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: ml_api_db
    ports:
      - "5432:5432"
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
      - ./infrastructure/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚ö° Redis - Cache y sesiones
  redis:
    image: redis:7-alpine
    container_name: ml-api-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ‚öôÔ∏è Backend FastAPI
  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile.backend
    container_name: ml-api-backend
    restart: always
    ports:
      - "8000:8000"
    environment:
      - POSTGRES_SERVER=postgres
      - REDIS_HOST=redis
      - DEBUG=True
    volumes:
      - ./backend:/app
      - ./data/models:/app/data/models
      - ./data/uploads:/app/data/uploads
      - ./data/logs:/app/data/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # üì° WebSocket Service
  websocket:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile.websocket
    container_name: ml-api-websocket
    restart: always
    ports:
      - "8001:8001"
    environment:
      - REDIS_HOST=redis
    depends_on:
      - redis
      - backend

  # üé® Frontend Web App
  frontend:
    build:
      context: ./frontend/web-app
      dockerfile: ../../infrastructure/docker/Dockerfile.frontend
    container_name: ml-api-frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8001
    volumes:
      - ./frontend/web-app:/app
      - /app/node_modules
    depends_on:
      - backend

  # üîß Frontend Admin Panel
  admin-panel:
    build:
      context: ./frontend/admin-panel
      dockerfile: ../../infrastructure/docker/Dockerfile.frontend
    container_name: ml-api-admin
    restart: always
    ports:
      - "3001:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend/admin-panel:/app
      - /app/node_modules
    depends_on:
      - backend

  # üåê Nginx Proxy
  nginx:
    image: nginx:alpine
    container_name: ml-api-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./infrastructure/nginx/conf.d:/etc/nginx/conf.d
      - ./data/nginx/logs:/var/log/nginx
    depends_on:
      - backend
      - frontend
      - admin-panel

  # üìä Prometheus - M√©tricas
  prometheus:
    image: prom/prometheus:latest
    container_name: ml-api-prometheus
    restart: always
    ports:
      - "8002:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./data/prometheus:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"

  # üìà Grafana - Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: ml-api-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./infrastructure/monitoring/grafana-dashboards:/var/lib/grafana/dashboards
      - ./infrastructure/monitoring/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./data/grafana:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:

networks:
  default:
    name: ml-api-network
