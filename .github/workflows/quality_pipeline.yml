# 🚨 ========= COPILOTO/CURSOR: PIPELINE DE CALIDAD AUTOMATIZADA ========= 🚨
#
# 🤖 PIPELINE AUTOMÁTICO DE VALIDACIÓN:
#    ✅ Pre-commit hooks automáticos
#    ✅ Tests de seguridad VPS
#    ✅ Análisis de código y deuda técnica
#    ✅ Tests unitarios y de integración
#    ✅ Deploy automático a VPS (opcional)
#
# 🚀 TRIGGERS:
#    ✅ Pull Requests: Validación completa
#    ✅ Push a main: Deploy y validación
#    ✅ Schedules: Análisis nocturno
#
# 📚 REFERENCIA: /RULES.md sección "🧠 REGLAS PARA COPILOTO/CURSOR"
# 
# ================================================================

name: 🔧 Pipeline de Calidad Automatizada

on:
  # 📋 Validar Pull Requests
  pull_request:
    branches: [ main, master, develop ]
    types: [opened, synchronize, reopened]
  
  # 🚀 Deploy en push a main
  push:
    branches: [ main, master ]
  
  # ⏰ Análisis programado (diario a las 2 AM)
  schedule:
    - cron: '0 2 * * *'
  
  # 🔧 Trigger manual
  workflow_dispatch:
    inputs:
      deploy_to_vps:
        description: 'Deploy to VPS after validation'
        required: false
        default: false
        type: boolean

# 🔒 Configuración de seguridad
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  # Variables de seguridad para VPS (usar secrets del repo)

# 🧪 Jobs del pipeline
jobs:
  
  # ======================================
  # 🔍 VALIDACIÓN DE SEGURIDAD VPS
  # ======================================
  security_scan:
    name: 🔒 Escaneo de Seguridad VPS
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Para análisis completo
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Instalar dependencias de seguridad
      run: |
        python -m pip install --upgrade pip
        pip install detect-secrets bandit safety semgrep yamllint
    
    # 🔐 Detectar secretos hardcodeados
    - name: 🔍 Detect Secrets
      run: |
        detect-secrets scan --all-files --baseline .secrets.baseline
        detect-secrets audit .secrets.baseline
    
    # 🚫 Análisis de vulnerabilidades Python
    - name: 🛡️ Bandit Security Scan
      run: |
        bandit -r backend/app/ -f json -o reports/bandit_report.json || true
        bandit -r backend/app/ -f txt
    
    # 📦 Verificar dependencias vulnerables
    - name: 🔍 Safety Check
      run: |
        safety check --json --output reports/safety_report.json || true
        safety check
    
    # 🏗️ Análisis estático de código
    - name: 🔬 Semgrep Security Analysis
      run: |
        semgrep --config=auto backend/app/ --json --output=reports/semgrep_report.json || true
        semgrep --config=auto backend/app/
    
    # 📄 Validar archivos YAML
    - name: 📋 YAML Lint
      run: |
        yamllint . || true
    
    - name: 📤 Upload Security Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: reports/
        retention-days: 30

  # ======================================
  # 🧪 TESTS Y VALIDACIÓN DE CÓDIGO
  # ======================================
  code_quality:
    name: 🧪 Tests y Calidad de Código
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: security_scan
    
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: 📦 Instalar dependencias
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/dev.txt
        pip install -r requirements/test.txt
    
    # 🎨 Pre-commit hooks
    - name: 🔗 Pre-commit Validation
      run: |
        cd backend
        pre-commit install
        pre-commit run --all-files
    
    # 🧹 Formateo y linting
    - name: 🎨 Code Formatting
      run: |
        cd backend
        black --check --diff app/ tests/
        isort --check-only --diff app/ tests/
    
    - name: 🔍 Linting
      run: |
        cd backend
        flake8 app/ tests/
        mypy app/
    
    # 🧪 Tests unitarios
    - name: 🧪 Unit Tests
      run: |
        cd backend
        pytest tests/unit/ -v --cov=app --cov-report=xml --cov-report=html --cov-report=term
    
    # 🔗 Tests de integración
    - name: 🔗 Integration Tests
      run: |
        cd backend
        pytest tests/integration/ -v --tb=short
    
    # 📊 Análisis de deuda técnica
    - name: 📊 Technical Debt Analysis
      run: |
        cd backend
        python infrastructure/scripts/tech_debt_analyzer.py --format json --output ../reports/tech_debt.json
        python infrastructure/scripts/tech_debt_analyzer.py --format console
    
    - name: 📤 Upload Coverage Reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: |
          backend/htmlcov/
          backend/coverage.xml
        retention-days: 30

  # ======================================
  # 🏗️ BUILD Y VALIDACIÓN DE APLICACIÓN
  # ======================================
  build_validation:
    name: 🏗️ Build y Validación
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security_scan, code_quality]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Instalar dependencias
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements/base.txt
        pip install -r requirements/test.txt
    
    # ⚙️ Tests con base de datos real
    - name: 🗄️ Database Tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        cd backend
        python -m pytest tests/integration/test_database/ -v
    
    # 🚀 Test de aplicación completa
    - name: 🚀 Application Health Test
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        TESTING: true
      run: |
        cd backend
        python -c "
        import sys
        sys.path.append('.')
        from app.main import app
        from fastapi.testclient import TestClient
        client = TestClient(app)
        response = client.get('/health')
        assert response.status_code == 200
        print('✅ Application health check passed')
        "

  # ======================================
  # 📊 REPORTE CONSOLIDADO
  # ======================================
  quality_report:
    name: 📊 Reporte de Calidad
    runs-on: ubuntu-latest
    needs: [security_scan, code_quality, build_validation]
    if: always()
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 📥 Download Security Reports
      uses: actions/download-artifact@v3
      with:
        name: security-reports
        path: reports/security/
    
    - name: 📥 Download Coverage Reports
      uses: actions/download-artifact@v3
      with:
        name: coverage-reports-3.11
        path: reports/coverage/
    
    - name: 📊 Generar Reporte Consolidado
      run: |
        echo "# 📊 Reporte de Calidad Automatizada" > quality_report.md
        echo "" >> quality_report.md
        echo "## 🔒 Seguridad" >> quality_report.md
        echo "- ✅ Escaneo de secretos completado" >> quality_report.md
        echo "- ✅ Análisis de vulnerabilidades ejecutado" >> quality_report.md
        echo "- ✅ Validación de dependencias realizada" >> quality_report.md
        echo "" >> quality_report.md
        echo "## 🧪 Tests" >> quality_report.md
        echo "- ✅ Tests unitarios ejecutados" >> quality_report.md
        echo "- ✅ Tests de integración completados" >> quality_report.md
        echo "- ✅ Validación de aplicación exitosa" >> quality_report.md
        echo "" >> quality_report.md
        echo "## 📊 Métricas" >> quality_report.md
        echo "- 📋 Ver reportes detallados en artifacts" >> quality_report.md
        echo "- 🎯 Coverage objetivo: ≥80%" >> quality_report.md
        echo "- 🔧 Deuda técnica: Analizada automáticamente" >> quality_report.md
    
    - name: 📤 Upload Consolidated Report
      uses: actions/upload-artifact@v3
      with:
        name: quality-consolidated-report
        path: quality_report.md
        retention-days: 90

  # ======================================
  # 🚀 DEPLOY OPCIONAL A VPS
  # ======================================
  deploy_vps:
    name: 🚀 Deploy a VPS
    runs-on: ubuntu-latest
    needs: [security_scan, code_quality, build_validation]
    if: |
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') &&
      (github.event_name == 'push' || github.event.inputs.deploy_to_vps == 'true')
    environment: production
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🔧 Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.VPS_SSH_KEY }}
    
    - name: 🚀 Deploy to VPS
      run: |
        echo "🚀 Iniciando deploy a VPS..."
        # Aquí irían los comandos específicos de deploy
        # ssh user@vps-ip "cd /path/to/app && git pull && docker-compose up -d"
        echo "✅ Deploy completado (simulado)"
    
    - name: 🏥 Health Check Post-Deploy
      run: |
        echo "🏥 Verificando salud de la aplicación..."
        # curl -f http://your-vps-domain/health
        echo "✅ Aplicación funcionando correctamente" 