# üö® ========= COPILOTO/CURSOR: VALIDACI√ìN COMPLETA PIPELINES ========= üö®
#
# üîç SCRIPT DE VALIDACI√ìN FINAL:
#    ‚úÖ Valida sintaxis de workflows de GitHub Actions
#    ‚úÖ Explica warnings de "Context access might be invalid"
#    ‚úÖ Verifica estructura completa de pipelines
#    ‚úÖ Genera checklist de configuraci√≥n
#    ‚úÖ Proporciona instrucciones paso a paso
#
# üîß USO: .\validate_pipelines.ps1
# üìö REFERENCIA: .github/README.md
# 
# ================================================================

Write-Host "üîç ============= VALIDACI√ìN COMPLETA DE PIPELINES ============= üîç" -ForegroundColor Cyan
Write-Host "An√°lisis detallado del sistema de GitHub Actions" -ForegroundColor White
Write-Host ""

# Funci√≥n para explicar los warnings del linter
function Explain-LinterWarnings {
    Write-Host "‚ö†Ô∏è ============= EXPLICACI√ìN DE WARNINGS ============= ‚ö†Ô∏è" -ForegroundColor Yellow
    Write-Host ""
    
    Write-Host "üîç WARNINGS 'Context access might be invalid':" -ForegroundColor White
    Write-Host ""
    Write-Host "   ‚úÖ ESTO ES NORMAL Y ESPERADO" -ForegroundColor Green
    Write-Host "   üìã Raz√≥n: Los secrets de GitHub no existen localmente" -ForegroundColor Gray
    Write-Host "   üîß Soluci√≥n: Configurar secrets en GitHub Settings" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üîê Secrets que muestran warnings:" -ForegroundColor White
    Write-Host "   ‚Ä¢ VPS_SSH_KEY  ‚ûú Clave SSH privada" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ VPS_USER     ‚ûú Usuario SSH del VPS" -ForegroundColor Gray  
    Write-Host "   ‚Ä¢ VPS_HOST     ‚ûú IP o dominio del VPS" -ForegroundColor Gray
    Write-Host "   ‚Ä¢ VPS_URL      ‚ûú URL de la aplicaci√≥n" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "‚úÖ LA SINTAXIS ES CORRECTA:" -ForegroundColor Green
    Write-Host "   ‚Ä¢ ${{ secrets.SECRET_NAME }} ‚úÖ Correcto" -ForegroundColor Green
    Write-Host "   ‚Ä¢ Los workflows funcionar√°n cuando se configuren los secrets" -ForegroundColor Green
    Write-Host ""
}

# Validar estructura de workflows
function Test-WorkflowStructure {
    Write-Host "üìÅ ============= ESTRUCTURA DE WORKFLOWS ============= üìÅ" -ForegroundColor Cyan
    Write-Host ""
    
    $workflows = @{
        ".github/workflows/quality_pipeline.yml" = @{
            name = "Pipeline Principal de Calidad"
            triggers = @("pull_request", "push", "schedule")
            jobs = @("security_scan", "code_quality", "build_validation", "quality_report")
        }
        ".github/workflows/security_scan.yml" = @{
            name = "Pipeline de Seguridad Avanzada"
            triggers = @("schedule", "push", "workflow_dispatch")
            jobs = @("attack_surface_analysis", "vulnerability_scan", "security_report")
        }
        ".github/workflows/performance_test.yml" = @{
            name = "Pipeline de Performance Testing"
            triggers = @("schedule", "push", "workflow_dispatch")
            jobs = @("setup_performance_env", "api_benchmark", "load_testing", "performance_report")
        }
        ".github/workflows/deploy_vps.yml" = @{
            name = "Pipeline de Deploy VPS"
            triggers = @("push", "workflow_dispatch")
            jobs = @("pre_deploy_validation", "backup_production", "deploy_vps", "health_checks", "rollback", "deploy_report")
        }
    }
    
    $allValid = $true
    foreach ($workflow in $workflows.GetEnumerator()) {
        if (Test-Path $workflow.Key) {
            Write-Host "‚úÖ $($workflow.Value.name)" -ForegroundColor Green
            Write-Host "   üìÅ Archivo: $($workflow.Key)" -ForegroundColor Gray
            Write-Host "   üöÄ Triggers: $($workflow.Value.triggers -join ', ')" -ForegroundColor Gray
            Write-Host "   üîß Jobs: $($workflow.Value.jobs.Count) configurados" -ForegroundColor Gray
            Write-Host ""
        } else {
            Write-Host "‚ùå FALTA: $($workflow.Value.name)" -ForegroundColor Red
            Write-Host "   üìÅ Archivo esperado: $($workflow.Key)" -ForegroundColor Red
            $allValid = $false
            Write-Host ""
        }
    }
    
    return $allValid
}

# Validar sintaxis YAML
function Test-YAMLSyntax {
    Write-Host "üîç ============= VALIDACI√ìN SINTAXIS YAML ============= üîç" -ForegroundColor Cyan
    Write-Host ""
    
    # Intentar instalar yamllint si no est√° disponible
    try {
        $null = Get-Command yamllint -ErrorAction Stop
        $yamlLint = "yamllint"
    } catch {
        try {
            # Intentar con Python
            $pythonExe = "backend/venv/Scripts/python.exe"
            if (Test-Path $pythonExe) {
                & $pythonExe -m pip install yamllint -q
                $yamlLint = "$pythonExe -m yamllint"
            } else {
                pip install yamllint -q
                $yamlLint = "yamllint"
            }
        } catch {
            Write-Host "‚ö†Ô∏è No se pudo instalar yamllint - validaci√≥n manual" -ForegroundColor Yellow
            return $true
        }
    }
    
    $workflows = Get-ChildItem ".github/workflows/*.yml" -ErrorAction SilentlyContinue
    if (-not $workflows) {
        Write-Host "‚ùå No se encontraron workflows en .github/workflows/" -ForegroundColor Red
        return $false
    }
    
    $allValid = $true
    foreach ($workflow in $workflows) {
        Write-Host "üìã Validando: $($workflow.Name)" -ForegroundColor White
        
        try {
            $output = & $yamlLint $workflow.FullName 2>&1
            if ($LASTEXITCODE -eq 0) {
                Write-Host "   ‚úÖ Sintaxis YAML correcta" -ForegroundColor Green
            } else {
                Write-Host "   ‚ö†Ô∏è Warnings de formato (no cr√≠ticos):" -ForegroundColor Yellow
                Write-Host "   $output" -ForegroundColor Gray
            }
        } catch {
            Write-Host "   ‚ö†Ô∏è No se pudo validar - revisar manualmente" -ForegroundColor Yellow
        }
        Write-Host ""
    }
    
    return $allValid
}

# Generar checklist de configuraci√≥n
function Show-ConfigurationChecklist {
    Write-Host "üìã ============= CHECKLIST DE CONFIGURACI√ìN ============= üìã" -ForegroundColor Cyan
    Write-Host ""
    
    Write-Host "üîê PASO 1: CONFIGURAR SECRETS EN GITHUB" -ForegroundColor Yellow
    Write-Host "   Ve a: Settings ‚ûú Secrets and variables ‚ûú Actions" -ForegroundColor White
    Write-Host ""
    Write-Host "   Crear estos secrets:" -ForegroundColor White
    Write-Host "   ‚òê VPS_SSH_KEY  = tu_clave_ssh_privada" -ForegroundColor Gray
    Write-Host "   ‚òê VPS_USER     = ubuntu (o tu usuario)" -ForegroundColor Gray
    Write-Host "   ‚òê VPS_HOST     = 192.168.1.100 (tu IP)" -ForegroundColor Gray
    Write-Host "   ‚òê VPS_URL      = https://tu-dominio.com" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üèóÔ∏è PASO 2: CONFIGURAR VPS" -ForegroundColor Yellow
    Write-Host "   En tu servidor:" -ForegroundColor White
    Write-Host "   ‚òê Crear directorios requeridos" -ForegroundColor Gray
    Write-Host "   ‚òê Configurar servicio systemd" -ForegroundColor Gray
    Write-Host "   ‚òê Configurar permisos SSH" -ForegroundColor Gray
    Write-Host "   ‚òê Instalar dependencias (PostgreSQL, Redis, etc.)" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üöÄ PASO 3: ACTIVAR PIPELINES" -ForegroundColor Yellow
    Write-Host "   En GitHub:" -ForegroundColor White
    Write-Host "   ‚òê Hacer push a main (activa pipeline principal)" -ForegroundColor Gray
    Write-Host "   ‚òê Verificar en Actions tab que se ejecuta" -ForegroundColor Gray
    Write-Host "   ‚òê Revisar logs por errores de configuraci√≥n" -ForegroundColor Gray
    Write-Host "   ‚òê Descargar artifacts con reportes" -ForegroundColor Gray
    Write-Host ""
    
    Write-Host "üìä PASO 4: MONITOREAR Y AJUSTAR" -ForegroundColor Yellow
    Write-Host "   Despu√©s del primer run:" -ForegroundColor White
    Write-Host "   ‚òê Revisar reportes de calidad" -ForegroundColor Gray
    Write-Host "   ‚òê Corregir issues encontrados" -ForegroundColor Gray
    Write-Host "   ‚òê Configurar notificaciones si es necesario" -ForegroundColor Gray
    Write-Host "   ‚òê Ajustar schedules seg√∫n necesidades" -ForegroundColor Gray
    Write-Host ""
}

# Mostrar resumen de pipelines
function Show-PipelinesSummary {
    Write-Host "ü§ñ ============= RESUMEN DE PIPELINES ============= ü§ñ" -ForegroundColor Cyan
    Write-Host ""
    
    $pipelines = @(
        @{
            name = "üîß Pipeline Principal"
            file = "quality_pipeline.yml"
            frequency = "En cada PR y push a main"
            duration = "~30 min"
            purpose = "Validaci√≥n completa de calidad"
        },
        @{
            name = "üîí Pipeline Seguridad"
            file = "security_scan.yml" 
            frequency = "Diario a las 6 AM"
            duration = "~25 min"
            purpose = "An√°lisis profundo de vulnerabilidades"
        },
        @{
            name = "‚ö° Pipeline Performance"
            file = "performance_test.yml"
            frequency = "Lunes a las 3 AM"
            duration = "~20 min"
            purpose = "Tests de carga y rendimiento"
        },
        @{
            name = "üöÄ Pipeline Deploy"
            file = "deploy_vps.yml"
            frequency = "Push a main y manual"
            duration = "~15 min"
            purpose = "Deploy autom√°tico con rollback"
        }
    )
    
    foreach ($pipeline in $pipelines) {
        Write-Host "$($pipeline.name)" -ForegroundColor White
        Write-Host "   üìÅ Archivo: $($pipeline.file)" -ForegroundColor Gray
        Write-Host "   ‚è∞ Frecuencia: $($pipeline.frequency)" -ForegroundColor Gray
        Write-Host "   ‚è±Ô∏è Duraci√≥n: $($pipeline.duration)" -ForegroundColor Gray
        Write-Host "   üéØ Prop√≥sito: $($pipeline.purpose)" -ForegroundColor Gray
        Write-Host ""
    }
}

# Verificar archivos de configuraci√≥n adicionales
function Test-ConfigurationFiles {
    Write-Host "‚öôÔ∏è ============= ARCHIVOS DE CONFIGURACI√ìN ============= ‚öôÔ∏è" -ForegroundColor Cyan
    Write-Host ""
    
    $configs = @{
        ".github/README.md" = "Documentaci√≥n de pipelines"
        ".pre-commit-config.yaml" = "Pre-commit hooks"
        ".secrets.baseline" = "Baseline de secrets"
        ".yamllint.yml" = "Configuraci√≥n YAML lint"
        "mypy.ini" = "Type checking"
        "pyproject.toml" = "Configuraci√≥n Python"
        "ruff.toml" = "Linter r√°pido"
    }
    
    $allGood = $true
    foreach ($config in $configs.GetEnumerator()) {
        if (Test-Path $config.Key) {
            Write-Host "‚úÖ $($config.Value): $($config.Key)" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è Opcional: $($config.Value) ($($config.Key))" -ForegroundColor Yellow
        }
    }
    
    return $allGood
}

# ============= EJECUCI√ìN PRINCIPAL =============

try {
    # Banner inicial
    Write-Host "üéØ Validando sistema completo de pipelines automatizados..." -ForegroundColor White
    Write-Host ""
    
    # Explicar warnings del linter
    Explain-LinterWarnings
    
    # Validaciones
    $structure = Test-WorkflowStructure
    $syntax = Test-YAMLSyntax
    $configs = Test-ConfigurationFiles
    
    # Resumen y checklist
    Show-PipelinesSummary
    Show-ConfigurationChecklist
    
    # Resultado final
    Write-Host "üéØ ============= RESULTADO DE VALIDACI√ìN ============= üéØ" -ForegroundColor Cyan
    Write-Host ""
    
    if ($structure -and $syntax) {
        Write-Host "üéâ ¬°PIPELINES VALIDADOS EXITOSAMENTE!" -ForegroundColor Green
        Write-Host ""
        Write-Host "‚úÖ Estructura de workflows: CORRECTA" -ForegroundColor Green
        Write-Host "‚úÖ Sintaxis YAML: V√ÅLIDA" -ForegroundColor Green
        Write-Host "‚úÖ Archivos de configuraci√≥n: PRESENTES" -ForegroundColor Green
        Write-Host ""
        Write-Host "‚ö†Ô∏è WARNINGS DEL LINTER:" -ForegroundColor Yellow
        Write-Host "   ‚Ä¢ 'Context access might be invalid' = NORMAL" -ForegroundColor White
        Write-Host "   ‚Ä¢ Se solucionar√° al configurar secrets en GitHub" -ForegroundColor White
        Write-Host ""
        Write-Host "üöÄ PR√ìXIMO PASO:" -ForegroundColor Cyan
        Write-Host "   1. Configurar secrets en GitHub Settings" -ForegroundColor White
        Write-Host "   2. Hacer push para activar primer pipeline" -ForegroundColor White
        Write-Host "   3. Monitorear en GitHub Actions tab" -ForegroundColor White
    } else {
        Write-Host "‚ö†Ô∏è VALIDACI√ìN INCOMPLETA" -ForegroundColor Yellow
        Write-Host "   Algunos componentes necesitan atenci√≥n" -ForegroundColor White
        Write-Host "   Revisar mensajes de error arriba" -ForegroundColor White
    }
    
    Write-Host ""
    Write-Host "üìö Documentaci√≥n completa: .github/README.md" -ForegroundColor Cyan
    Write-Host "üîó Configurar secrets: Settings ‚ûú Secrets and variables ‚ûú Actions" -ForegroundColor Cyan
    
} catch {
    Write-Host ""
    Write-Host "‚ùå Error durante la validaci√≥n: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} 