#!/usr/bin/env pwsh
<#
.SYNOPSIS
    üîÑ Auto-Commit System - Protecci√≥n autom√°tica contra p√©rdida de datos

.DESCRIPTION
    Sistema que hace commits autom√°ticos frecuentes para proteger el trabajo
    en desarrollo. Ideal para situaciones de inestabilidad del sistema.

.PARAMETER Interval
    Intervalo en minutos entre commits autom√°ticos (default: 5 minutos)

.PARAMETER Stop
    Detener el auto-commit daemon

.PARAMETER Status
    Mostrar estado del auto-commit daemon

.PARAMETER Fast
    Usar modo r√°pido con validaciones m√≠nimas

.EXAMPLE
    .\scripts\auto_commit.ps1
    Inicia auto-commits cada 5 minutos

.EXAMPLE
    .\scripts\auto_commit.ps1 -Interval 3 -Fast
    Auto-commits cada 3 minutos en modo r√°pido

.EXAMPLE
    .\scripts\auto_commit.ps1 -Stop
    Detiene el auto-commit daemon
#>

param(
    [Parameter(Mandatory = $false)]
    [int]$Interval = 5,

    [Parameter(Mandatory = $false)]
    [switch]$Stop,

    [Parameter(Mandatory = $false)]
    [switch]$Status,

    [Parameter(Mandatory = $false)]
    [switch]$Fast
)

# Configuraci√≥n
$ScriptDir = Split-Path -Parent $MyInvocation.MyCommand.Definition
$ProjectRoot = Split-Path -Parent $ScriptDir
$PidFile = Join-Path $ProjectRoot ".auto_commit.pid"
$LogFile = Join-Path $ProjectRoot "auto_commit.log"

function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logEntry = "[$timestamp] [$Level] $Message"
    Add-Content -Path $LogFile -Value $logEntry
    Write-Host $logEntry -ForegroundColor $(if ($Level -eq "ERROR") { "Red" } elseif ($Level -eq "WARN") { "Yellow" } else { "Green" })
}

function Test-AutoCommitRunning {
    if (Test-Path $PidFile) {
        $processId = Get-Content $PidFile -ErrorAction SilentlyContinue
        if ($processId -and (Get-Process -Id $processId -ErrorAction SilentlyContinue)) {
            return $true
        } else {
            # Archivo PID obsoleto
            Remove-Item $PidFile -ErrorAction SilentlyContinue
            return $false
        }
    }
    return $false
}

function Stop-AutoCommit {
    if (Test-Path $PidFile) {
        $processId = Get-Content $PidFile -ErrorAction SilentlyContinue
        if ($processId) {
            try {
                Stop-Process -Id $processId -Force -ErrorAction SilentlyContinue
                Remove-Item $PidFile -ErrorAction SilentlyContinue
                Write-Log "Auto-commit daemon detenido (PID: $processId)" "INFO"
                return $true
            } catch {
                Write-Log "Error deteniendo proceso $processId : $_" "ERROR"
            }
        }
    }
    Write-Log "No hay auto-commit daemon ejecut√°ndose" "WARN"
    return $false
}

function Show-Status {
    Write-Host "`nüîÑ AUTO-COMMIT STATUS" -ForegroundColor Cyan
    Write-Host ("=" * 30) -ForegroundColor Cyan

    if (Test-AutoCommitRunning) {
        $processId = Get-Content $PidFile
        $process = Get-Process -Id $processId
        $startTime = $process.StartTime
        $runtime = (Get-Date) - $startTime

        Write-Host "‚úÖ Estado: ACTIVO" -ForegroundColor Green
        Write-Host "üî¢ PID: $processId" -ForegroundColor White
        Write-Host "‚è∞ Tiempo ejecut√°ndose: $($runtime.ToString('hh\:mm\:ss'))" -ForegroundColor White
        Write-Host "üìÅ Archivo PID: $PidFile" -ForegroundColor Gray
    } else {
        Write-Host "‚ùå Estado: INACTIVO" -ForegroundColor Red
    }

    Write-Host "üìã Log: $LogFile" -ForegroundColor Gray

    if (Test-Path $LogFile) {
        Write-Host "`nüìú √öltimas 5 entradas del log:" -ForegroundColor Yellow
        Get-Content $LogFile | Select-Object -Last 5 | ForEach-Object {
            Write-Host "   $_" -ForegroundColor Gray
        }
    }
}

function Start-AutoCommitDaemon {
    if (Test-AutoCommitRunning) {
        Write-Log "Auto-commit daemon ya est√° ejecut√°ndose" "WARN"
        Show-Status
        return
    }

    Write-Log "Iniciando auto-commit daemon (intervalo: $Interval minutos)" "INFO"

    # Crear job en background
    $job = Start-Job -ScriptBlock {
        param($ProjectRoot, $Interval, $Fast, $LogFile)

        function Write-JobLog {
            param([string]$Message, [string]$Level = "INFO")
            $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            $logEntry = "[$timestamp] [$Level] $Message"
            Add-Content -Path $LogFile -Value $logEntry
        }

        Set-Location $ProjectRoot
        Write-JobLog "Auto-commit daemon iniciado en $ProjectRoot"

        while ($true) {
            try {
                # Verificar si hay cambios
                $gitStatus = git status --porcelain 2>$null

                if ($gitStatus) {
                    $changedFiles = ($gitStatus | Measure-Object).Count
                    Write-JobLog "Detectados $changedFiles archivos modificados"

                    # Agregar cambios
                    git add . 2>$null

                    # Generar mensaje autom√°tico
                    $timestamp = Get-Date -Format "HH:mm:ss"
                    $message = "auto: save work in progress at $timestamp"

                    if ($Fast) {
                        # Commit r√°pido con bypass
                        $result = git commit --no-verify -m $message 2>&1
                        if ($LASTEXITCODE -eq 0) {
                            Write-JobLog "‚úÖ Auto-commit r√°pido: $message"

                            # Intentar push autom√°tico
                            $pushResult = git push origin master 2>&1
                            if ($LASTEXITCODE -eq 0) {
                                Write-JobLog "üì§ Auto-push exitoso"
                            } else {
                                Write-JobLog "‚ö†Ô∏è Auto-push fall√≥: $pushResult" "WARN"
                            }
                        } else {
                            Write-JobLog "‚ùå Auto-commit fall√≥: $result" "ERROR"
                        }
                    } else {
                        # Usar sistema de commits completo pero automatizado
                        Write-JobLog "Ejecutando commit con validaciones..."
                        # Aqu√≠ se podr√≠a integrar con smart_commit_fast.ps1
                    }
                } else {
                    Write-JobLog "No hay cambios para commitear" "DEBUG"
                }

            } catch {
                Write-JobLog "Error en auto-commit: $_" "ERROR"
            }

            # Esperar intervalo
            Start-Sleep -Seconds ($Interval * 60)
        }

    } -ArgumentList $ProjectRoot, $Interval, $Fast, $LogFile

    # Guardar PID del job
    $job.Id | Out-File -FilePath $PidFile -Encoding ASCII

    Write-Log "‚úÖ Auto-commit daemon iniciado (Job ID: $($job.Id))" "INFO"
    Write-Log "üìù Commits autom√°ticos cada $Interval minutos" "INFO"
    Write-Log "‚ö° Modo: $(if ($Fast) { 'R√ÅPIDO (bypass validaciones)' } else { 'COMPLETO (con validaciones)' })" "INFO"

    Show-Status
}

# Main execution
Write-Host "üîÑ AUTO-COMMIT SYSTEM" -ForegroundColor Cyan
Write-Host ("=" * 25) -ForegroundColor Cyan

if ($Stop) {
    Stop-AutoCommit
} elseif ($Status) {
    Show-Status
} else {
    Start-AutoCommitDaemon
}

Write-Host "`nüí° COMANDOS √öTILES:" -ForegroundColor Yellow
Write-Host "üìä .\scripts\auto_commit.ps1 -Status       - Ver estado" -ForegroundColor White
Write-Host "‚èπÔ∏è  .\scripts\auto_commit.ps1 -Stop         - Detener" -ForegroundColor White
Write-Host "‚ö° .\scripts\auto_commit.ps1 -Fast         - Modo r√°pido" -ForegroundColor White
Write-Host "üìã Get-Content auto_commit.log             - Ver log completo" -ForegroundColor White
