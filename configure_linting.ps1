# üö® ========= COPILOTO/CURSOR: CONFIGURACI√ìN LINTING ========= üö®
#
# üìã SCRIPT DE CONFIGURACI√ìN COMPLETA DE LINTING
#    ‚úÖ Instala todas las herramientas de linting
#    ‚úÖ Verifica configuraciones
#    ‚úÖ Ejecuta tests de configuraci√≥n
#    ‚úÖ Configura pre-commit hooks
#
# üîß USO: .\configure_linting.ps1
# üìö REFERENCIA: /RULES.md secci√≥n "üß† REGLAS PARA COPILOTO/CURSOR"
# 
# ================================================================

param(
    [switch]$InstallRuff = $false,
    [switch]$SkipTests = $false,
    [switch]$Verbose = $false
)

Write-Host "üîß ============= CONFIGURACI√ìN DE LINTING ============= üîß" -ForegroundColor Cyan
Write-Host "Configurando herramientas de linting para el proyecto ml-api-fastapi-v2" -ForegroundColor White
Write-Host ""

# Funci√≥n para verificar si estamos en el directorio correcto
function Test-ProjectRoot {
    if (!(Test-Path "backend/app") -or !(Test-Path "pyproject.toml")) {
        Write-Host "‚ùå Error: Ejecutar desde la ra√≠z del proyecto ml-api-fastapi-v2" -ForegroundColor Red
        exit 1
    }
}

# Funci√≥n para verificar Python y venv
function Test-PythonEnvironment {
    Write-Host "üêç Verificando entorno Python..." -ForegroundColor Yellow
    
    if (!(Test-Path "backend/venv")) {
        Write-Host "‚ùå Entorno virtual no encontrado en backend/venv" -ForegroundColor Red
        Write-Host "üí° Ejecutar primero: python -m venv backend/venv" -ForegroundColor Cyan
        exit 1
    }
    
    $pythonExe = "backend/venv/Scripts/python.exe"
    if (!(Test-Path $pythonExe)) {
        Write-Host "‚ùå Python no encontrado en entorno virtual" -ForegroundColor Red
        exit 1
    }
    
    Write-Host "‚úÖ Entorno Python verificado" -ForegroundColor Green
    return $pythonExe
}

# Funci√≥n para instalar herramientas de linting
function Install-LintingTools {
    param([string]$PythonExe)
    
    Write-Host "üì¶ Instalando herramientas de linting..." -ForegroundColor Yellow
    
    $tools = @(
        "flake8==7.3.0",
        "black==25.1.0", 
        "isort==6.0.1",
        "mypy==1.16.1",
        "pre-commit==4.0.1"
    )
    
    if ($InstallRuff) {
        $tools += "ruff==0.8.5"
        Write-Host "‚ö° Incluyendo Ruff (linter s√∫per r√°pido)" -ForegroundColor Magenta
    }
    
    foreach ($tool in $tools) {
        Write-Host "üìã Instalando $tool..." -ForegroundColor White
        & $PythonExe -m pip install $tool
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Error instalando $tool" -ForegroundColor Red
            exit 1
        }
    }
    
    Write-Host "‚úÖ Herramientas de linting instaladas" -ForegroundColor Green
}

# Funci√≥n para verificar configuraciones
function Test-LintingConfigurations {
    Write-Host "üîç Verificando archivos de configuraci√≥n..." -ForegroundColor Yellow
    
    $configs = @{
        ".flake8" = "Configuraci√≥n de Flake8"
        "pyproject.toml" = "Configuraci√≥n centralizada"
        "mypy.ini" = "Configuraci√≥n de MyPy"
        ".pre-commit-config.yaml" = "Pre-commit hooks"
    }
    
    if ($InstallRuff) {
        $configs["ruff.toml"] = "Configuraci√≥n de Ruff"
    }
    
    foreach ($config in $configs.GetEnumerator()) {
        if (Test-Path $config.Key) {
            Write-Host "‚úÖ $($config.Value): $($config.Key)" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Falta: $($config.Value) ($($config.Key))" -ForegroundColor Red
        }
    }
}

# Funci√≥n para ejecutar tests de linting
function Test-LintingTools {
    param([string]$PythonExe)
    
    if ($SkipTests) {
        Write-Host "‚è≠Ô∏è  Saltando tests de herramientas" -ForegroundColor Yellow
        return
    }
    
    Write-Host "üß™ Ejecutando tests de herramientas de linting..." -ForegroundColor Yellow
    
    # Test Flake8
    Write-Host "üìã Testing Flake8..." -ForegroundColor White
    & $PythonExe -m flake8 --version
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Flake8 funcionando" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Flake8 con problemas" -ForegroundColor Red
    }
    
    # Test Black
    Write-Host "üé® Testing Black..." -ForegroundColor White
    & $PythonExe -m black --version
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ Black funcionando" -ForegroundColor Green
    } else {
        Write-Host "‚ùå Black con problemas" -ForegroundColor Red
    }
    
    # Test isort
    Write-Host "üìã Testing isort..." -ForegroundColor White
    & $PythonExe -m isort --version
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ isort funcionando" -ForegroundColor Green
    } else {
        Write-Host "‚ùå isort con problemas" -ForegroundColor Red
    }
    
    # Test MyPy
    Write-Host "üîç Testing MyPy..." -ForegroundColor White
    & $PythonExe -m mypy --version
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ MyPy funcionando" -ForegroundColor Green
    } else {
        Write-Host "‚ùå MyPy con problemas" -ForegroundColor Red
    }
    
    # Test Ruff (si est√° instalado)
    if ($InstallRuff) {
        Write-Host "‚ö° Testing Ruff..." -ForegroundColor White
        & $PythonExe -m ruff --version
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Ruff funcionando" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Ruff con problemas" -ForegroundColor Red
        }
    }
}

# Funci√≥n para configurar pre-commit
function Setup-PreCommit {
    param([string]$PythonExe)
    
    Write-Host "üîó Configurando pre-commit hooks..." -ForegroundColor Yellow
    
    if (Test-Path ".pre-commit-config.yaml") {
        & $PythonExe -m pre_commit install
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Pre-commit hooks instalados" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Error configurando pre-commit" -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Archivo .pre-commit-config.yaml no encontrado" -ForegroundColor Red
    }
}

# Funci√≥n para mostrar resumen de comandos
function Show-LintingCommands {
    Write-Host ""
    Write-Host "üöÄ ============= COMANDOS DE LINTING ============= üöÄ" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "üìã AN√ÅLISIS:" -ForegroundColor Yellow
    Write-Host "   flake8 backend/app --count --statistics" -ForegroundColor White
    Write-Host "   mypy backend/app" -ForegroundColor White
    if ($InstallRuff) {
        Write-Host "   ruff check backend/app" -ForegroundColor White
    }
    Write-Host ""
    Write-Host "üîß CORRECCI√ìN AUTOM√ÅTICA:" -ForegroundColor Yellow
    Write-Host "   black backend/app" -ForegroundColor White
    Write-Host "   isort backend/app" -ForegroundColor White
    if ($InstallRuff) {
        Write-Host "   ruff check --fix backend/app" -ForegroundColor White
        Write-Host "   ruff format backend/app" -ForegroundColor White
    }
    Write-Host ""
    Write-Host "üîó PRE-COMMIT:" -ForegroundColor Yellow
    Write-Host "   pre-commit run --all-files" -ForegroundColor White
    Write-Host ""
    Write-Host "üéØ SMART COMMIT:" -ForegroundColor Yellow
    Write-Host "   .\\scripts\\smart_commit_clean.ps1 -Message \"tu mensaje\"" -ForegroundColor White
    Write-Host ""
}

# ============= EJECUCI√ìN PRINCIPAL =============

try {
    # Verificaciones iniciales
    Test-ProjectRoot
    $pythonExe = Test-PythonEnvironment
    
    # Instalaci√≥n de herramientas
    Install-LintingTools -PythonExe $pythonExe
    
    # Verificaci√≥n de configuraciones
    Test-LintingConfigurations
    
    # Tests de herramientas
    Test-LintingTools -PythonExe $pythonExe
    
    # Configuraci√≥n de pre-commit
    Setup-PreCommit -PythonExe $pythonExe
    
    # Mostrar comandos disponibles
    Show-LintingCommands
    
    Write-Host ""
    Write-Host "üéâ ============= CONFIGURACI√ìN COMPLETADA ============= üéâ" -ForegroundColor Green
    Write-Host "Todas las herramientas de linting est√°n configuradas y listas para usar" -ForegroundColor White
    Write-Host ""
    Write-Host "üí° Pr√≥ximos pasos:" -ForegroundColor Cyan
    Write-Host "   1. Ejecutar: black backend/app (corregir formato)" -ForegroundColor White
    Write-Host "   2. Ejecutar: isort backend/app (ordenar imports)" -ForegroundColor White
    Write-Host "   3. Ejecutar: flake8 backend/app (verificar errores)" -ForegroundColor White
    Write-Host "   4. Usar smart commit para commits autom√°ticos" -ForegroundColor White
    
} catch {
    Write-Host ""
    Write-Host "‚ùå Error durante la configuraci√≥n: $($_.Exception.Message)" -ForegroundColor Red
    exit 1
} 