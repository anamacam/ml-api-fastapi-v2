# üö® ======= COPILOTO/CURSOR: CONFIGURACI√ìN CENTRALIZADA ======= üö®
#
# üìã CONFIGURACI√ìN CENTRALIZADA DE HERRAMIENTAS:
#    ‚úÖ Black: Formateo autom√°tico con line-length=88
#    ‚úÖ isort: Ordenamiento de imports compatible con Black
#    ‚úÖ pytest: Configuraci√≥n de tests con coverage
#    ‚úÖ coverage: M√©tricas de cobertura >= 80%
#
# üîß TODAS las herramientas deben usar la misma configuraci√≥n
# ‚ùå NO modificar sin actualizar .flake8 y .pre-commit-config.yaml
#
# üìö REFERENCIA: /RULES.md secci√≥n "üß† REGLAS PARA COPILOTO/CURSOR"
# 
# ================================================================

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ml-api-fastapi-v2"
version = "2.0.0"
description = "API de Machine Learning con FastAPI - Arquitectura Enterprise"
authors = [
    {name = "ML-API Team", email = "dev@ml-api.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.12"
keywords = ["fastapi", "machine-learning", "api", "enterprise"]

# üé® ============= CONFIGURACI√ìN BLACK =============
[tool.black]
line-length = 88
target-version = ['py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Directorios a excluir
    \.git
    | \.mypy_cache
    | \.pytest_cache
    | \.venv
    | venv
    | htmlcov
    | reports
    | build
    | dist
    | node_modules
)/
'''

# üìã ============= CONFIGURACI√ìN ISORT =============
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["app", "tests"]
known_third_party = [
    "fastapi", "pydantic", "sqlalchemy", "pytest",
    "uvicorn", "alembic", "sklearn", "pandas", "numpy"
]
skip = [
    ".git", "__pycache__", ".pytest_cache", ".mypy_cache",
    "venv", "htmlcov", "reports", "build", "dist", "node_modules"
]

# üß™ ============= CONFIGURACI√ìN PYTEST =============
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=app",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=80"
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "performance: marks tests as performance tests"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]

# üìä ============= CONFIGURACI√ìN COVERAGE =============
[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/scripts/*",
    "app/main.py"  # Archivo de entrada, dif√≠cil de testear
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@\\(abc\\.\\)?abstractmethod"
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "reports/coverage.xml"

# üîç ============= CONFIGURACI√ìN MYPY (COMPLEMENTARIA) =============
[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
show_error_codes = true
exclude = [
    "^venv/",
    "^htmlcov/",
    "^reports/",
    "^\\.pytest_cache/",
    "^build/",
    "^dist/"
] 